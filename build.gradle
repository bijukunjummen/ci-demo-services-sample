buildscript {
	ext {
		kotlinVersion = '1.1.3-2'
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'

version = getProp('newVersion') ?: '1.0.2-SNAPSHOT'
group = 'com.pivotalservices.sample'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	compile("io.springfox:springfox-swagger2:2.7.0")
	compile 'io.springfox:springfox-swagger-ui:2.7.0'
	
	compile("com.h2database:h2")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

publishing {
	repositories {
		maven {
			// REPO_WITH_JARS is deprecated
			url getProp('REPO_WITH_JARS') ?: getProp('REPO_WITH_BINARIES') ?: 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'admin'
				password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}


task groupId {
	doLast {
		println project.group
	}
}

task artifactId {
	doLast {
		println project.name
	}
}

task currentVersion {
	doLast {
		println project.version
	}
}

task smoke(type: Test) {
	description = "Task to run smoke tests"
	testLogging {
		exceptionFormat = 'full'
	}
	jvmArgs = systemPropsFromGradle()
//	include 'smoke/**'
}